name: C++ CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # Install OpenCL
    - name: Install OpenCL (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y opencl-headers ocl-icd-opencl-dev pocl-opencl-icd

    - name: Install OpenCL (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # 检查是否已安装CUDA
        if (!(Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA")) {
          # 下载CUDA installer
          $InstallerUrl = "https://developer.download.nvidia.com/compute/cuda/12.3.1/local_installers/cuda_12.3.1_546.12_windows.exe"
          $InstallerPath = "$env:TEMP\cuda_installer.exe"
          Invoke-WebRequest -Uri $InstallerUrl -OutFile $InstallerPath

          # 静默安装CUDA（只安装必要组件）
          Start-Process -FilePath $InstallerPath -ArgumentList "-s nvcc_12.3 cudart_12.3 visual_studio_integration_12.3" -Wait

          # 添加CUDA到系统路径
          echo "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.3" >> $env:GITHUB_ENV
          echo "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.3\bin" >> $env:GITHUB_PATH
        }

    - name: Cache Boost
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/boost_install
        key: ${{ runner.os }}-boost-1.83.0-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: ${{ runner.os }}-boost-1.83.0-

    - name: Install Boost (Ubuntu)
      if: runner.os == 'Linux' && steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        wget https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.tar.gz
        tar -xzf boost_1_83_0.tar.gz
        cd boost_1_83_0
        ./bootstrap.sh --prefix=${{ github.workspace }}/boost_install
        ./b2 install --with-system --with-filesystem --with-regex --with-iostreams --with-program_options --with-date_time --with-json
        cd ..

    - name: Install Boost (Windows)
      if: runner.os == 'Windows' && steps.cache-boost.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        $Env:BOOST_ROOT = "${{ github.workspace }}\boost_install"
        $Env:BOOST_URL = "https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.zip"
        $Env:BOOST_ZIP = "${{ runner.temp }}\boost.zip"
        Invoke-WebRequest -Uri $Env:BOOST_URL -OutFile $Env:BOOST_ZIP
        Expand-Archive -Path $Env:BOOST_ZIP -DestinationPath ${{ runner.temp }}
        Move-Item -Path "${{ runner.temp }}\boost_1_83_0" -Destination $Env:BOOST_ROOT
        Set-Location $Env:BOOST_ROOT
        .\bootstrap.bat
        .\b2 --with-system --with-filesystem --with-regex --with-iostreams --with-program_options --with-date_time --with-json

    - name: Set Boost environment variables
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "BOOST_ROOT=${{ github.workspace }}/boost_install" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=${{ github.workspace }}/boost_install/stage/lib" >> $GITHUB_ENV
        else
          echo "BOOST_ROOT=${{ github.workspace }}/boost_install" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=${{ github.workspace }}/boost_install/lib" >> $GITHUB_ENV
        fi
        echo "Setting Boost variables:"
        echo "BOOST_ROOT=$BOOST_ROOT"
        echo "BOOST_LIBRARYDIR=$BOOST_LIBRARYDIR"

        - name: Debug Environment
        shell: bash
        run: |
          echo "Current directory: ${{ github.workspace }}"
          echo "CMake version:"
          cmake --version
          echo "BOOST_ROOT: ${{ env.BOOST_ROOT }}"
          echo "BOOST_LIBRARYDIR: ${{ env.BOOST_LIBRARYDIR }}"
          if [ "$RUNNER_OS" == "Windows" ]; then
            pwsh -Command "Write-Host 'Contents of BOOST_ROOT:'; if (Test-Path $env:BOOST_ROOT) { Get-ChildItem $env:BOOST_ROOT } else { Write-Host 'BOOST_ROOT directory does not exist' }"
            pwsh -Command "Write-Host 'Contents of BOOST_LIBRARYDIR:'; if (Test-Path $env:BOOST_LIBRARYDIR) { Get-ChildItem $env:BOOST_LIBRARYDIR } else { Write-Host 'BOOST_LIBRARYDIR directory does not exist' }"
            # 检查OpenCL安装
            pwsh -Command "Write-Host 'OpenCL Status:'; if (Test-Path 'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA') { Get-ChildItem 'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA' } else { Write-Host 'CUDA not found' }"
          else
            echo "Contents of BOOST_ROOT:"
            if [ -d "$BOOST_ROOT" ]; then
              ls -R "$BOOST_ROOT"
            else
              echo "BOOST_ROOT directory does not exist"
            fi
            # 检查OpenCL安装
            echo "OpenCL Status:"
            dpkg -l | grep -i opencl
          fi

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=Release \
          -DBOOST_ROOT=${{ env.BOOST_ROOT }} \
          -DBOOST_LIBRARYDIR=${{ env.BOOST_LIBRARYDIR }} \
          -DBoost_DEBUG=ON \
          -DBoost_DETAILED_FAILURE_MSG=ON \
          -DUSE_OPENCL=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Release

    - name: Run Google Tests
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./build/Release/gtest_unitTest.exe
        else
          ./build/gtest_unitTest
        fi

    - name: Upload CMake logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cmake-logs-${{ runner.os }}
        path: |
          ${{github.workspace}}/build/CMakeFiles/CMakeOutput.log
          ${{github.workspace}}/build/CMakeFiles/CMakeError.log

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ runner.os }}
        path: ${{github.workspace}}/build
