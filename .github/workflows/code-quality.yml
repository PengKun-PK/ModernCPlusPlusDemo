name: Code Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  clang-tidy-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # Install OpenCL
    - name: Install OpenCL
      run: |
        sudo apt-get update
        sudo apt-get install -y opencl-headers ocl-icd-opencl-dev pocl-opencl-icd ocl-icd-dev

    - name: Cache Boost
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/boost_install
        key: ubuntu-boost-1.83.0-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: ubuntu-boost-1.83.0-

    - name: Install Boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        echo "使用 apt 安装 Boost"
        sudo apt-get update
        sudo apt-get install -y libboost-all-dev

        # 验证安装
        dpkg -l | grep libboost

        # 设置环境变量
        echo "BOOST_ROOT=/usr" >> $GITHUB_ENV
        echo "BOOST_LIBRARYDIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

    - name: Set Boost environment variables
      run: |
        echo "BOOST_ROOT=${{ github.workspace }}/boost_install" >> $GITHUB_ENV
        echo "BOOST_LIBRARYDIR=${{ github.workspace }}/boost_install/lib" >> $GITHUB_ENV
        echo "Setting Boost variables:"
        echo "BOOST_ROOT=$BOOST_ROOT"
        echo "BOOST_LIBRARYDIR=$BOOST_LIBRARYDIR"

    - name: Install LLVM and Clang
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18
        sudo apt-get update
        sudo apt-get install -y clang-tidy-18 clang-18 llvm-18 llvm-18-dev libclang-18-dev
        sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-18 100

    - name: Debug Environment
      run: |
        echo "Current directory: ${{ github.workspace }}"
        echo "CMake version:"
        cmake --version
        echo "BOOST_ROOT: ${{ env.BOOST_ROOT }}"
        echo "BOOST_LIBRARYDIR: ${{ env.BOOST_LIBRARYDIR }}"
        echo "Contents of BOOST_ROOT:"
        if [ -d "$BOOST_ROOT" ]; then
          ls -la "$BOOST_ROOT"
        else
          echo "BOOST_ROOT directory does not exist"
        fi
        echo "Contents of BOOST_LIBRARYDIR:"
        if [ -d "$BOOST_LIBRARYDIR" ]; then
          ls -la "$BOOST_LIBRARYDIR"
        else
          echo "BOOST_LIBRARYDIR directory does not exist"
        fi
        echo "OpenCL Status:"
        dpkg -l | grep -i opencl

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DBOOST_ROOT=${{ env.BOOST_ROOT }} -DBOOST_LIBRARYDIR=${{ env.BOOST_LIBRARYDIR }} -DBoost_DEBUG=ON -DBoost_DETAILED_FAILURE_MSG=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DUSE_OPENCL=ON

    - name: Build project
      run: cmake --build ${{github.workspace}}/build --config Release

    - name: Run clang-tidy
      run: |
        set -e

        clang_tidy_cmd="clang-tidy-18"
        opencl_include="/usr/include"
        project_path="${{ github.workspace }}"

        echo "Using clang-tidy command: $clang_tidy_cmd"
        echo "Project path: $project_path"
        echo "OpenCL include path: $opencl_include"

        # Print clang-tidy version
        $clang_tidy_cmd --version

        # 定义排除目录
        exclude_dirs=("test" "lib" "build" "boost_install" "boost_1_83_0")

        # 获取所有源文件
        source_files=()
        for dir in "$project_path"/*; do
          if [[ -d "$dir" ]]; then
            dir_name=$(basename "$dir")
            skip_dir=false
            for exclude in "${exclude_dirs[@]}"; do
              if [[ "$dir_name" == "$exclude" ]]; then
                skip_dir=true
                break
              fi
            done

            if [[ "$skip_dir" == false ]]; then
              while IFS= read -r -d '' file; do
                source_files+=("$file")
              done < <(find "$dir" -type f \( -name "*.cpp" -o -name "*.hpp" \) -print0)
            fi
          fi
        done

        # 添加根目录的源文件
        while IFS= read -r -d '' file; do
          source_files+=("$file")
        done < <(find "$project_path" -maxdepth 1 -type f \( -name "*.cpp" -o -name "*.hpp" \) -print0)

        if [[ ${#source_files[@]} -gt 0 ]]; then
          echo "Found source files:"
          printf '%s\n' "${source_files[@]}"

          for file in "${source_files[@]}"; do
            if [[ "$file" != *"boost_install"* && \
                  "$file" != *"/lib/"* && \
                  "$file" != *"boost_1_83_0"* && \
                  "$file" != *"boost"* ]]; then
              echo "Running clang-tidy on $file"
              $clang_tidy_cmd "$file" \
                -p="$project_path/build" \
                --config-file="$project_path/.clang-tidy" \
                --extra-arg=-std=c++20 \
                --extra-arg=-I"$opencl_include" \
                --extra-arg=-I"${{ env.BOOST_ROOT }}" \
                --extra-arg=-I"${{ env.BOOST_ROOT }}/boost" \
                --extra-arg=-I"$project_path/lib/splog/include" \
                --extra-arg=-I"$project_path" \
                --checks="-*,modernize-*,readability-*,-modernize-use-trailing-return-type,-readability-magic-numbers,-readability-identifier-length" || {
                echo "Warning: Clang-tidy reported issues for $file"
                # 不退出，继续检查其他文件
              }
            fi
          done
        else
          echo "No source files found in the project directories"
          exit 1
        fi

        echo "Clang-tidy check completed."

    - name: Upload CMake logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cmake-logs-ubuntu
        path: |
          ${{github.workspace}}/build/CMakeFiles/CMakeOutput.log
          ${{github.workspace}}/build/CMakeFiles/CMakeError.log

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-ubuntu
        path: ${{github.workspace}}/build
