name: Code Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  clang-tidy-check:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # 获取所有历史记录

    - name: Fetch base branch
      if: github.event_name == 'pull_request'
      run: |
        git fetch origin ${{ github.base_ref }}

    # Install OpenCL
    - name: Install OpenCL (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y opencl-headers ocl-icd-opencl-dev pocl-opencl-icd ocl-icd-dev

    - name: Install OpenCL (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Starting OpenCL installation..."

        # 检查是否已安装CUDA
        $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.3"
        if (!(Test-Path $cudaPath)) {
            Write-Host "CUDA not found, downloading Khronos headers..."

            # 创建目录
            New-Item -ItemType Directory -Force -Path "$cudaPath\include\CL" | Out-Null

            # 克隆 Khronos OpenCL Headers
            $headers_temp = Join-Path $env:TEMP "opencl-headers"
            git clone --depth 1 https://github.com/KhronosGroup/OpenCL-Headers.git $headers_temp

            # 复制头文件
            Copy-Item "$headers_temp\CL\*" "$cudaPath\include\CL" -Force
        }

        # 设置环境变量
        echo "OPENCL_INCLUDE_DIR=$cudaPath\include" >> $env:GITHUB_ENV

    - name: Cache Boost
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/boost_install
        key: ${{ runner.os }}-boost-1.83.0-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: ${{ runner.os }}-boost-1.83.0-

    - name: Install Boost (Ubuntu)
      if: runner.os == 'Linux' && steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        wget https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.tar.gz
        tar -xzf boost_1_83_0.tar.gz
        cd boost_1_83_0
        ./bootstrap.sh --prefix=${{ github.workspace }}/boost_install
        ./b2 install --with-system --with-filesystem --with-regex --with-iostreams --with-program_options --with-date_time --with-json
        cd ..

    - name: Install Boost (Windows)
      if: runner.os == 'Windows' && steps.cache-boost.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        $Env:BOOST_ROOT = "${{ github.workspace }}\boost_install"
        $Env:BOOST_URL = "https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.zip"
        $Env:BOOST_ZIP = "${{ runner.temp }}\boost.zip"
        Invoke-WebRequest -Uri $Env:BOOST_URL -OutFile $Env:BOOST_ZIP
        Expand-Archive -Path $Env:BOOST_ZIP -DestinationPath ${{ runner.temp }}
        Move-Item -Path "${{ runner.temp }}\boost_1_83_0" -Destination $Env:BOOST_ROOT
        Set-Location $Env:BOOST_ROOT
        .\bootstrap.bat
        .\b2 --with-system --with-filesystem --with-regex --with-iostreams --with-program_options --with-date_time --with-json

    - name: Set Boost environment variables
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "BOOST_ROOT=${{ github.workspace }}/boost_install" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=${{ github.workspace }}/boost_install/stage/lib" >> $GITHUB_ENV
        else
          echo "BOOST_ROOT=${{ github.workspace }}/boost_install" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=${{ github.workspace }}/boost_install/lib" >> $GITHUB_ENV
        fi
        echo "Setting Boost variables:"
        echo "BOOST_ROOT=$BOOST_ROOT"
        echo "BOOST_LIBRARYDIR=$BOOST_LIBRARYDIR"

    - name: Install LLVM and Clang (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18
        sudo apt-get update
        sudo apt-get install -y clang-tidy-18 clang-18 llvm-18 llvm-18-dev libclang-18-dev
        sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-18 100

    - name: Install LLVM and Clang (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        choco install llvm --force -y
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install GitHub CLI (Ubuntu)
      if: runner.os == 'Linux' && github.event_name == 'pull_request'
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh

    - name: Install GitHub CLI (Windows)
      if: runner.os == 'Windows' && github.event_name == 'pull_request'
      shell: pwsh
      run: |
        choco install gh -y

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DBOOST_ROOT=${{ env.BOOST_ROOT }} -DBOOST_LIBRARYDIR=${{ env.BOOST_LIBRARYDIR }} -DBoost_DEBUG=ON -DBoost_DETAILED_FAILURE_MSG=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DUSE_OPENCL=ON

    - name: Build project
      run: cmake --build ${{github.workspace}}/build --config Release

    - name: Run clang-tidy with annotations
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        # 创建输出目录
        New-Item -ItemType Directory -Force -Path "clang-tidy-output"

        # 获取需要检查的文件
        $files_to_check = @()
        if ($env:GITHUB_EVENT_NAME -eq 'pull_request') {
            # 对于PR，获取更改的文件
            Write-Host "Getting changed files for PR..."
            git fetch origin ${{ github.base_ref }}
            $mergeBase = git merge-base HEAD origin/${{ github.base_ref }}
            $files_to_check = git diff --name-only $mergeBase HEAD | Where-Object {
                $_ -match '\.(cpp|hpp)$' -and
                -not ($_ -match '^(test|lib|build|boost_install)/')
            }
        } else {
            # 对于push，检查所有源文件
            Write-Host "Getting all source files..."
            $exclude_dirs = @("test", "lib", "build", "boost_install")
            Get-ChildItem -Path ${{ github.workspace }} -Recurse -Include *.cpp,*.hpp |
                Where-Object {
                    $path = $_.FullName
                    -not ($exclude_dirs | Where-Object { $path -like "*\$_\*" })
                } |
                ForEach-Object { $files_to_check += $_.FullName }
        }

        Write-Host "Files to check:"
        $files_to_check | ForEach-Object { Write-Host $_ }

        if ($files_to_check.Count -eq 0) {
            Write-Host "No files to check, skipping clang-tidy analysis"
            exit 0
        }

        foreach ($file in $files_to_check) {
            if (Test-Path $file) {
                Write-Host "Analyzing: $file"

                # 运行 clang-tidy
                $clang_tidy_cmd = if ($env:RUNNER_OS -eq "Windows") { "clang-tidy.exe" } else { "clang-tidy-18" }
                $opencl_include = if ($env:RUNNER_OS -eq "Windows") {
                    "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.3\include"
                } else {
                    "/usr/include"
                }

                $output = & $clang_tidy_cmd $file `
                    -p="${{ github.workspace }}/build" `
                    --config-file="${{ github.workspace }}/.clang-tidy" `
                    --extra-arg=-std=c++20 `
                    --extra-arg=-I"$opencl_include" `
                    --extra-arg=-I"${{ env.BOOST_ROOT }}" `
                    --extra-arg=-I"${{ env.BOOST_ROOT }}/boost" `
                    --extra-arg=-I"${{ github.workspace }}/lib/splog/include" `
                    --extra-arg=-I"${{ github.workspace }}" `
                    --checks="-*,modernize-*,readability-*,-modernize-use-trailing-return-type,-readability-magic-numbers,-readability-identifier-length" 2>&1

                # 处理输出
                $output | ForEach-Object {
                    if ($_ -match '(.*):(\d+):(\d+): (warning|error): (.*)') {
                        $filePath = $matches[1]
                        $line = $matches[2]
                        $col = $matches[3]
                        $level = $matches[4]
                        $message = $matches[5]

                        # 创建 GitHub 注释
                        Write-Host "::$level file=$filePath,line=$line,col=$col::$message"

                        # 保存到文件
                        @{
                            file = $filePath
                            line = $line
                            column = $col
                            level = $level
                            message = $message
                        } | ConvertTo-Json | Add-Content -Path "clang-tidy-output/issues.json"
                    } else {
                        # 输出其他信息作为调试信息
                        Write-Host "Debug: $_"
                    }
                }
            } else {
                Write-Host "Warning: File not found: $file"
            }
        }

        # 如果是PR且有发现问题，创建PR评论
        if ($env:GITHUB_EVENT_NAME -eq 'pull_request' -and (Test-Path "clang-tidy-output/issues.json")) {
            $issues = Get-Content "clang-tidy-output/issues.json" | ConvertFrom-Json
            if ($issues) {
                $body = "## Clang-Tidy Analysis Results`n`n"
                if ($issues -is [array]) {
                    $issues | ForEach-Object {
                        $body += "* **$($_.file):$($_.line):$($_.column)** - $($_.level): $($_.message)`n"
                    }
                } else {
                    $body += "* **$($issues.file):$($issues.line):$($issues.column)** - $($issues.level): $($issues.message)`n"
                }
                $body | gh pr comment ${{ github.event.pull_request.number }} --body-file -
            }
        }

        Write-Host "Clang-tidy analysis completed"

    - name: Upload analysis results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: clang-tidy-results-${{ matrix.os }}
        path: clang-tidy-output/

    - name: Upload CMake logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cmake-logs-${{ matrix.os }}
        path: |
          ${{github.workspace}}/build/CMakeFiles/CMakeOutput.log
          ${{github.workspace}}/build/CMakeFiles/CMakeError.log

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}
        path: ${{github.workspace}}/build
